<?php

// Define the block that displays the module
function doi_display_block_info() {
  $blocks['doi_display'] = array(
    'info' => t('DOI Display'),
  );
  return $blocks;
}

// Define what is displayed in the module
function doi_display_block_view($delta='') {
  switch ($delta) {
  case 'doi_display':
      $doi = doi_display_get_content();
      $block['subject'] = t("Citation");
      $block['content'] = $doi;
      return $block;
      break;
  }
}

// The subroutine that creates the actual display
function doi_display_get_content() {
    
    if(arg(0) == 'node' && is_numeric(arg(1))) {
        // Grab node id of current node
        $current_nid = arg(1);
       
        // Load current node to grab fields
        $current_node = node_load($current_nid);
    }

    // Get node id of content type containing the doi
    
    if($current_node->type == observing_facility){

        $nid = $current_node->field_doi_reference[und][0][target_id];
    }

    else if($current_node->type == instrument){
    
        $nid = $current_node->field_i_doi_reference[und][0][target_id];
    }

    $node = node_load($nid); 
    
    // Grab the value in the title of the doi content type which contains the doi
    $doi = $node->title;
    $url = "http://ezid.cdlib.org/manage/display_xml/";
    $full_url = $url . $doi;   

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $full_url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $xml = curl_exec($ch);
    curl_close($ch);


    // Separate the xml in $output into objects that PHP can grab
    $xmlobj = simplexml_load_string($xml);
 
    // Create variables for each of the metadata items
    $node->field_doi_identifier[und][0][value] = $xmlobj->identifier;
    $node->field_doi_creator[und][0][value] = $xmlobj->creators->creator->creatorName;
    $node->field_doi_title[und][0][value] = $xmlobj->titles->title;
    $node->field_doi_publisher[und][0][value] = $xmlobj->publisher;
    $node->field_doi_description[und][0][value] = $xmlobj->descriptions->description;
    
    // For loop to add all contributors to the contributors field
    $contributors_field = '';
    foreach($xmlobj->contributors->contributor as $contributor) {
        $contributors_field = $contributors_field . $contributor->contributorName . ", ";
    }
    $node->field_doi_contributors[und][0][value] = $contributors_field;

    $node->field_doi_dates[und][0][value] = $xmlobj->dates->date;
    $node->field_doi_rights[und][0][value] = $xmlobj->rightsList->rights;
    $node->field_doi_location[und][0][value] = $xmlobj->geoLocations->geoLocation->geoLocationPlace;
 

    // Pull the full citation from the doi.org webiste
    $url = "http://doi.org/" . $node->field_doi_identifier[und][0][value];
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    $citation_style = "american-meteorological-society";
    $headers = array("Accept: text/x-bibliography; style=" . $citation_style);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    $citation = curl_exec($ch);
    
    // Catch errors returned from DataCite and retun messages corresponding to HTTP Codes
    if(!curl_errno($ch)) {
        $info = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        if($info >= 500 && $info < 600) {
            $citation = "DataCite is experiencing problems and we cannot display a citation. Please check back later.";
        }
        else if($info >= 400 && $info < 500) {
            $citation = "The DOI entered for this node does not exist on DataCite.";
        }
    }


    curl_close($ch);
    
    drupal_set_message($node->field_doi_identifier[und][0][value]);
  
    // Output text from module to be displayed in the block
    $output = ("When referencing the " . $node->field_doi_title[und][0][value] . " in publications or proposals, please use the identifier <strong>" . $doi . "</strong> -- for example as a citation:<br><blockquote> " . $citation . "</blockquote> Please be careful of linebreaks when cutting and pasting the above text, and feel free to reformat to fit your document. Additional citation styles are avilable at <a style='color:#297AC9' href='http://data.datacite.org/" . $node->field_doi_identifier[und][0][vlaue] . "'>DataCite</a> or <a style='color:#297AC9' href='http://crosscite.org/citeproc/'>CrossCite</a>.<br><br>");

    // Add additional First Use paper info if publication is linked
    if($node->field_first_use_paper[und][0][target_id] != NULL){
        $additional = "Additionally, please cite the First Use paper associated with this Facility/Instrument: <List contents of first_use_paper field here>";
        $fup_nid = $node->field_first_use_paper[und][0][target_id];
        $fup_node = node_load($fup_nid);
        $output = ($output . $additional . "<blockquote>" . $fup_node->field_publication_full_citation[und][0][value] . "</blockquote>");
    }


    // Save metadata to DOI content fields    
    node_save($node);

    return $output;
}
