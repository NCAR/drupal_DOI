<?php
// Custom module to display a citation on a node given a DOI for that node.
// Contains the following functions which might be of use to other modules.
//    _doi_display_query_datacite($doi,$accept) - given a doi and an Accept string which 
//          defines a format, query datacite and return metadata in the requested
//          format.
//     _doi_display_get_full_citation_from_doi($doi)
// function _doi_display_get_xmlobj($doi) {

// Define the block that displays the module
function doi_display_block_info() {
  $blocks['doi_display'] = array(
    'info' => t('DOI Display'),
  );
  return $blocks;
}

// Define what is displayed in the module
function doi_display_block_view($delta='') {
  switch ($delta) {
  case 'doi_display':
      $doi = doi_display_get_content();
      $block['subject'] = t("Citation");
      $block['content'] = $doi;
      return $block;
      break;
  }
}

//Query datacite and return metadata for this DOI based on type given in accept 
//command
function _doi_display_query_datacite($doi,$accept) {
    // Sort out if being passed the full datacite path and DOI, or just the DOI
    if (preg_match('/http/i', $doi)) {
        $url = $doi;
    } else {
        $url = "http://data.datacite.org/" . $doi;
    }	
    
    // Query datacite and return the metadata based on $accept option. 
    // Store in $result 
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    $headers = array($accept);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    $result = curl_exec($ch);

    // Catch errors returned from DataCite and retun messages corresponding to 
    // HTTP Codes
    if(!curl_errno($ch)) {
        $info = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        if($info >= 500 && $info < 600) {
	    $result = "DataCite is experiencing problems and we cannot display 
		a citation. Please check back later.";
        }
        else if($info >= 400 && $info < 500) {
	    $result = "Error: <strong>" . $info . "</strong>. The DOI entered 
		for this node does not exist on DataCite.";
	}
    }
    curl_close($ch);

    // Filter out bad responses from dx.doi.org. A handful of DOIs 
    // that returned HTML instead of the expected response - this is a 
    // catch-all to detect that bad response. Not sure if we will get these 
    // using data.datacite.org, but leave it just in case.
    if (preg_match('/DOCTYPE/', $result)) {
        $result = "";
    } else if (preg_match('/html/', $result)) {
	$result = "";
    }

    // Convert to ascii to remove weird UTF-8 Characters
    $result = iconv('UTF-8', 'ASCII//TRANSLIT', $result);

    return($result);

}


// Pull the full citation from the doi.org website
function _doi_display_get_full_citation_from_doi($doi) {
    // Set the citation style. There are many choices. Set your preference 
    // here.
    $citation_style = "apa";
    $accept = "Accept: text/x-bibliography; style=" . $citation_style;

    $citation = _doi_display_query_datacite($doi,$accept);

    // Add access date to citation
    $citation = $citation."Retrieved ".date("F j, Y");

    return($citation);
}

function _doi_display_get_xmlobj($doi) {
    #Query EZID for the XML for this DOI
    $url = "http://ezid.cdlib.org/manage/display_xml/";
    $full_url = $url . $doi;   

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $full_url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $xml = curl_exec($ch);
    curl_close($ch);

    // Separate the xml into objects that PHP can grab
    $xmlobj = simplexml_load_string($xml);

    // Return the objects
    return $xmlobj;
}


// The subroutine that creates the actual display
function doi_display_get_content() {
    // NOTE: This requires the existence of a DOI content type with the 
    // following variables: title, field_first_use_paper, field_doi_identifier, 
    // field_doi_creator,field_doi_title, field_doi_publisher, 
    // field_doi_description, field_doi_contributors, field_doi_dates, 
    // field_doi_rights, field_doi_location, and a page content type containing 
    // an entity reference field_doi_reference to the DOI.
    // Look into packaging this as a feature module so everything will be 
    // together.
    
    if(arg(0) == 'node' && is_numeric(arg(1))) {
        // Grab node id of current node
        $current_nid = arg(1);
       
        // Load current node to grab fields
        $current_node = node_load($current_nid);
    }

    // Check if field_doi_reference exists and is set
    if (!isset($current_node->field_doi_reference[und][0][target_id])) {
      return;
    }

    // DOI reference is set 
    else {

      // Get node id of content type containing the doi
      $nid = $current_node->field_doi_reference[und][0][target_id];
      $node = node_load($nid); 
      
      // Grab the value in the title of the doi content type which contains the doi
      // Note that JSON doesn't return all the metadata we want so use the XML 
      // query
      // Q. Should the title be used to store the DOI, rather than a defined field?
      $doi = $node->title;
      $xmlobj = _doi_display_get_xmlobj($doi);
   
      // Create variables for each of the metadata items
      $node->field_doi_identifier[und][0][value] = $xmlobj->identifier;
      $node->field_doi_creator[und][0][value] = $xmlobj->creators->creator->creatorName;
      $node->field_doi_title[und][0][value] = $xmlobj->titles->title;
      $node->field_doi_publisher[und][0][value] = $xmlobj->publisher;
      $node->field_doi_description[und][0][value] = $xmlobj->descriptions->description;

      // For loop to add all contributors to the contributors field
      $contributors_field = '';
      foreach($xmlobj->contributors->contributor as $contributor) {
          $contributors_field = $contributors_field . $contributor->attributes() . ": " . $contributor->contributorName . "\r\n";
      }
      $node->field_doi_contributors[und][0][value] = $contributors_field;

      $node->field_doi_dates[und][0][value] = $xmlobj->dates->date;
      $node->field_doi_rights[und][0][value] = $xmlobj->rightsList->rights;
      $node->field_doi_location[und][0][value] = $xmlobj->geoLocations->geoLocation->geoLocationPlace;
   
      $citation = _doi_display_get_full_citation_from_doi($node->field_doi_identifier[und][0][value]);

      // Output text from module to be displayed in the block
      $output = ("When referencing the " . $node->field_doi_title[und][0][value] . " in publications or proposals, please use the identifier <strong>" . $doi . "</strong> -- for example as a citation:<br><blockquote> " . $citation . "</blockquote> Please be careful of linebreaks when cutting and pasting the above text, and feel free to reformat to fit your document. Additional citation styles are avilable at <a style='color:#297AC9' href='http://data.datacite.org/" . $node->field_doi_identifier[und][0][value] . "'>DataCite</a> or <a style='color:#297AC9' href='http://crosscite.org/citeproc/'>CrossCite</a>.<br><br>");

      // Add additional First Use paper info if publication is linked
      if($node->field_first_use_paper[und][0][target_id] != NULL){
          $additional = "Additionally, please cite the First Use paper associated with this Facility/Instrument: <List contents of first_use_paper field here>";
          $fup_nid = $node->field_first_use_paper[und][0][target_id];
          $fup_node = node_load($fup_nid);
          $output = ($output . $additional . "<blockquote>" . $fup_node->field_publication_full_citation[und][0][value] . "</blockquote>");
      }

      // Save metadata to DOI content fields    
      node_save($node);

      return $output;

    } // endif field_doi_reference exists
}
