<?php
// Custom module to display a citation on a node given a DOI for that node.
// Contains the following functions which might be of use to other modules.
//    _doi_display_query_datacite($doi,$accept) - given a doi and an Accept string which 
//          defines a format, query datacite and return metadata in the requested
//          format.
//     _doi_display_get_full_citation_from_doi($doi)
// function _doi_display_get_xmlobj($doi) {



// Define the block that displays the module
function doi_display_block_info() {
  $blocks['doi_display'] = array(
    'info' => t('DOI Display'),
  );
  return $blocks;
}



// Define what is displayed in the module
function doi_display_block_view($delta='') {
  switch ($delta) {
  case 'doi_display':
      $doi = _doi_display_get_content();
      $block['subject'] = t("Citation");
      $block['content'] = $doi;
      return $block;
      break;
  }
}



/*
 *  Implements hook_node_presave
 * Before insterting or updating the DOI, retrieve the current state of the DOI metedate from crosscite
 */
function doi_display_node_presave($node) {
	if ($node->type == 'doi_display') {
		$node = _update_doi_node_contents($node);
	}
}


//Query datacite and return metadata for this DOI based on type given in accept 
//command
function _doi_display_query_datacite($doi,$accept) {
    // Sort out if being passed the full datacite path and DOI, or just the DOI
    if (preg_match('/http/i', $doi)) {
        $url = $doi;
    } else {
        $url = "http://data.datacite.org/" . $doi;
    }	
    
    // Query datacite and return the metadata based on $accept option. 
    // Store in $result 
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    $headers = array($accept);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    $result = curl_exec($ch);

    // Catch errors returned from DataCite and retun messages corresponding to 
    // HTTP Codes
    if(!curl_errno($ch)) {
        $info = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        if($info >= 500 && $info < 600) {
	    $result = "DataCite is experiencing problems and we cannot display 
		a citation. Please check back later.";
        }
        else if($info >= 400 && $info < 500) {
	    $result = "Error: <strong>" . $info . "</strong>. The DOI entered 
		for this node does not exist on DataCite.";
	}
    }
    curl_close($ch);

    // Filter out bad responses from dx.doi.org. A handful of DOIs 
    // that returned HTML instead of the expected response - this is a 
    // catch-all to detect that bad response. Not sure if we will get these 
    // using data.datacite.org, but leave it just in case.
    if (preg_match('/DOCTYPE/', $result)) {
        $result = "";
    } else if (preg_match('/html/', $result)) {
	$result = "";
    }

    // Convert to ascii to remove weird UTF-8 Characters
    $result = iconv('UTF-8', 'ASCII//TRANSLIT', $result);

    return($result);

}



// Pull the full citation from the doi.org website
function _doi_display_get_full_citation_from_doi($doi) {
    // Set the citation style. There are many choices. Set your preference 
    // here.
    $citation_style = "apa";
    $accept = "Accept: text/x-bibliography; style=" . $citation_style;

    $citation = _doi_display_query_datacite($doi,$accept);

    // Add access date to citation
    $citation = $citation."Retrieved " . date("F j, Y");

    return($citation);
}



function _doi_display_get_xmlobj($doi) {
    #Query EZID for the XML for this DOI
    $url = "http://ezid.cdlib.org/manage/display_xml/";
    $full_url = $url . $doi;   

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $full_url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $xml = curl_exec($ch);
    curl_close($ch);

    // Separate the xml into objects that PHP can grab
    $xmlobj = simplexml_load_string($xml);

    // Return the objects
    return $xmlobj;
}



function _get_referenced_doi_node($nid) {

	$query = Database::getConnection()
		->select('field_data_field_doi_reference', 'dr')
		->fields('dr', array('entity_id'));
	$query->condition('dr.field_doi_reference_target_id', $nid);	

	$nids = $query->execute()->fetchAll();		

	$doi_nids = array();

	foreach ($nids AS $nid) {
		array_push($doi_nids, $nid->entity_id);
	}

	$doi_node = null;

	if (isset($doi_nids[0]) && $doi_nids[0]) {
		$doi_node  = node_load($doi_nids[0]);
	}

	return($doi_node);	
}



// The subroutine that creates the actual display
function _doi_display_get_content() {
    // NOTE: This requires the existence of a DOI content type with the 
    // following variables: 
	// ALL FIELDS ARE NOW AUTOMATICALLY CREATED
	//   title
	//   field_first_use_paper
	//   field_doi_reference
	//   field_doi_identifier
	//   field_doi_creator
	//   field_doi_title
	//   field_doi_publisher
    //   field_doi_description
	//   field_doi_contributors
	//   field_doi_dates
    //   field_doi_rights
	//   field_doi_location


    
    if(arg(0) == 'node' && is_numeric(arg(1))) {
        // Grab node id of current node
        $current_nid = arg(1);
       
        // Load the DOI nodes referencing this page, if any
		$doi_node = _get_referenced_doi_node($current_nid);
    }

	$output = null;
	
    // If a DOI exists for this page, display it
    if (isset($doi_node->field_doi_reference['und'][0]['target_id'])) {

      $citation = $doi_node->field_doi_full_citation['und'][0]['value'];
dsm($doi_node->field_doi_identifier['und'][0]['value']);
      // Output text from module to be displayed in the block
      $output = ("When referencing the " . $doi_node->field_doi_title['und'][0]['value'] . " in publications or proposals, please use the identifier <strong>" . $doi_node->field_doi_identifier['und'][0]['value'] . "</strong> -- for example as a citation:<br><blockquote> " . $citation . "</blockquote> Please be careful of linebreaks when cutting and pasting the above text, and feel free to reformat to fit your document. Additional citation styles are avilable at <a style='color:#297AC9' href='http://data.datacite.org/" . $doi_node->field_doi_identifier['und'][0]['value'] . "'>DataCite</a> or <a style='color:#297AC9' href='http://crosscite.org/citeproc/'>CrossCite</a>.<br><br>");

      // Add additional First Use paper info if publication is linked
      if(isset($doi_node->field_first_use_paper['und'][0]['value']) && $doi_node->field_first_use_paper['und'][0]['value'] != NULL){
          $additional = "Additionally, please cite the First Use paper associated with this Facility/Instrument: <List contents of first_use_paper field here>";
          #$fup_nid = $doi_node->field_first_use_paper['und'][0]['value'];
          #$fup_node = node_load($fup_nid);
          #$output = ($output . $additional . "<blockquote>" . $fup_node->field_publication_full_citation['und'][0]['value'] . "</blockquote>");
          $output = ($output . $additional . "<blockquote>" . $doi_node->field_first_use_paper['und'][0]['value'] . "</blockquote>");
      }
    } 

    return $output;
}


function _update_doi_node_contents($doi_node) {
    // Grab the value in the title of the doi content type which contains the doi
    // Note that JSON doesn't return all the metadata we want so use the XML 
    // query

    $doi = $doi_node->title;
    $xmlobj = _doi_display_get_xmlobj($doi);
	
	if (! $xmlobj) {
		drupal_set_message('Unable to retrieve DOI metadata. Please check to make sure the DOI is formatted properly.', 'error');
	} else {
	    // Create variables for each of the metadata items
	    $doi_node->field_doi_identifier['und'][0]['value'] = $xmlobj->identifier;
	    $doi_node->field_doi_creator['und'][0]['value'] = $xmlobj->creators->creator->creatorName;
	    $doi_node->field_doi_title['und'][0]['value'] = $xmlobj->titles->title;
	    $doi_node->field_doi_publisher['und'][0]['value'] = $xmlobj->publisher;
	    $doi_node->field_doi_description['und'][0]['value'] = $xmlobj->descriptions->description;

	    // For loop to add all contributors to the contributors field
	    $contributors_field = '';

	    foreach($xmlobj->contributors->contributor as $contributor) {
	        $contributors_field = $contributors_field . $contributor->attributes() . ": " . $contributor->contributorName . "\r\n";
	    }

	    $doi_node->field_doi_contributors['und'][0]['value'] = $contributors_field;

	    $doi_node->field_doi_dates['und'][0]['value'] = $xmlobj->dates->date;
	    $doi_node->field_doi_rights['und'][0]['value'] = $xmlobj->rightsList->rights;
	    $doi_node->field_doi_location['und'][0]['value'] = $xmlobj->geoLocations->geoLocation->geoLocationPlace;
	    $doi_node->field_doi_full_citation['und'][0]['value'] = _doi_display_get_full_citation_from_doi($doi_node->field_doi_identifier['und'][0]['value']);
	}

	return($doi_node);
}

