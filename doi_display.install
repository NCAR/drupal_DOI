<?php
// Install / remove the doi content type during module installation / removal



/**
 * @file
 * Module file for Node Example module.
 *
 * Part of the Examples for Developers project.
 */

/**
 * Implements hook_menu().
 *
 * We are providing a default page to illustrate the use of our custom node view
 * mode that will live at http://example.com/?q=examples/doi_display
 */
function doi_display_menu() {
  $items['examples/doi_display'] = array(
    'page callback' => 'doi_display_page',
    'access arguments' => array('access content'),
    'title' => 'Node Example',
  );
  return $items;
}

/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function doi_display_node_info() {
  // We define the node type as an associative array.
  return array(
    'doi_display' => array(
      'name' => t('DOI'),
      // 'base' tells Drupal the base string for hook functions.
      // This is often the module name; if base is set to 'mymodule',
      // Drupal would call mymodule_insert() or similar for node
      // hooks. In our case, the base is 'doi_display'.
      'base' => 'doi_display',
      'description' => t(''),
      'title_label' => t('Digital Object Identifier'),
      // We'll set the 'locked' attribute to TRUE, so users won't be
      // able to change the machine name of our content type.
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_node_type_insert().
 *
 * Much like hook_node_insert() lets us know that a node is being
 * inserted into the database, hook_node_type_insert() lets us know
 * that a new content type has been inserted.
 *
 * Since Drupal will at some point insert our new content type,
 * this gives us a chance to add the fields we want.
 *
 * It is called for all inserts to the content type database, so
 * we have to make sure we're only modifying the type we're
 * concerned with.
 */
function doi_display_node_type_insert($content_type) {
  if ($content_type->type == 'doi_display') {
    // First we add the body field. Node API helpfully gives us
    // node_add_body_field().
    // We'll set the body label now, although we could also set
    // it along with our other instance properties later.
    // $body_instance = node_add_body_field($content_type, t('Example Description'));

    // Add our example_node_list view mode to the body instance
    // display by instructing the body to display as a summary.
    // $body_instance['display']['example_node_list'] = array(
    //   'label' => 'hidden',
    //   'type' => 'text_summary_or_trimmed',
    // );

    // Save our changes to the body field instance.
    // field_update_instance($body_instance);

    // Create all the fields we are adding to our content type.
    foreach (_doi_display_installed_fields() as $field) {
      field_create_field($field);
    }

    // Create all the instances for our fields.
    foreach (_doi_display_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'doi_display';
      field_create_instance($instance);
    }

    // node_types_rebuild();

	// Create the group

	$group_name = 'group_no_edit';
	$entity_type = 'node';
	$bundle = 'doi_display';
	$mode = 'form';

	$group = (object) array(
		'identifier' => $group_name .'|'. $entity_type .'|'. $bundle .'|'. $mode,
		'group_name' => $group_name,
		'entity_type' => $entity_type,
		'bundle' => $bundle,
		'mode' => $mode,
		'label' => 'Don\'t edit these fields, they are populated by DataCite. Make changes there.',
		'weight' => '1',
		'children' => array(
			'field_doi_identifier',
			'field_doi_creator',
			'field_doi_title',
			'field_doi_publisher',
			'field_doi_description',
			'field_doi_contributors',
			'field_doi_dates',
			'field_doi_rights',
			'field_doi_location',
		),
		'format_type' => 'fieldset',
		'format_settings' => array(
			'formatter' => 'collapsible',
			'instance_settings' => array(
				'description' => '',
				'classes' => '',
				'required_fields' => 1,
			),
		),
	);
	field_group_group_save($group);

	node_types_rebuild();

	}
}

/**
 * Implements hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/node-example.
 *
 * You can get fancy with this form, or you can just punt
 * and return the default form that node_content will provide.
 */
function doi_display_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Callback that builds our content and returns it to the browser.
 *
 * This callback comes from hook_menu().
 *
 * @return array
 *   A renderable array showing a list of our nodes.
 *
 * @see node_load()
 * @see node_view()
 * @see doi_display_field_formatter_view()
 */
function doi_display_page() {
  // We'll start building a renderable array that will be our page.
  // For now we just declare the array.
  $renderable_array = array();
  // We query the database and find all of the nodes for the type we defined.
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type AND n.status = :status';
  $result = db_query($sql,
    array(
      ':type' => 'doi_display',
      ':status' => 1,
    )
  );
  $renderable_array['explanation'] = array(
    '#markup' => t("Node Example nodes you've created will be displayed here. Note that the color fields will be displayed differently in this list, than if you view the node normally. Click on the node title to see the difference. This is a result of using our 'example_node_list' node view type."),
  );
  // Loop through each of our doi_display nodes and instruct node_view
  // to use our "example_node_list" view.
  // http://api.drupal.org/api/function/node_load/7
  // http://api.drupal.org/api/function/node_view/7
  foreach ($result as $row) {
    $node = node_load($row->nid);
    $renderable_array['node_list'][] = node_view($node, 'example_node_list');
  }
  return $renderable_array;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We need to modify the default node entity info by adding a new view mode to
 * be used in functions like node_view() or node_build_content().
 */
function doi_display_entity_info_alter(&$entity_info) {
  // Add our new view mode to the list of view modes...
  $entity_info['node']['view modes']['example_node_list'] = array(
    'label' => t('Example Node List'),
    'custom settings' => TRUE,
  );
}


/**
 * Implements hook_field_formatter_info().
 */
function doi_display_field_formatter_info() {
  return array(
    'doi_display_colors' => array(
      'label' => t('Node Example Color Handle'),
      'field types' => array('text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @todo: We need to provide a formatter for the colors that a user is allowed
 * to enter during node creation.
 */
function doi_display_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'doi_display_colors':
      foreach ($items as $delta => $item) {
        $element[$delta]['#type'] = 'markup';
        $color = $item['safe_value'];
        $element[$delta]['#markup'] = theme('example_node_color', array('color' => $color));
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function doi_display_theme($existing, $type, $theme, $path) {
  return array(
    'example_node_color' => array(
      'variables' => array('color' => NULL),
    ),
  );
}

/**
 * Implements hook_help().
 */
// function doi_display_help($path, $arg) {
//   switch ($path) {
//     case 'examples/doi_display':
//       return "<p>" . t("The Node Example module provides a custom node type.
//         You can create new Example Node nodes using the <a href='!nodeadd'>node add form</a>.",
//         array('!nodeadd' => url('node/add/node-example'))) . "</p>";
//   }
// }

/**
 * A custom theme function.
 *
 * By using this function to format our node-specific information, themes
 * can override this presentation if they wish.  This is a simplifed theme
 * function purely for illustrative purposes.
 */
function theme_example_node_color($variables) {
  $output = '<span style="background-color: #ccc; padding: 1em; margin-bottom: 1em; float: left; color: ' . $variables['color'] . '">' . $variables['color'] . '</span>';
  return $output;
}

/**
 * Define the fields for our content type.
 *
 * This big array is factored into this function for readability.
 *
 * @return array
 *   An associative array specifying the fields we wish to add to our
 *   new node type.
 */
function _doi_display_installed_fields() {
  return array(
	'field_first_use_paper' => array(
		'field_name'  => 'field_first_use_paper',
		'cardinality' => 1,
		'type'        => 'entityreference',
		'settings' => array(
			'target_type' => 'node',
			'handler_settings' => array(
				'target_bundles' => array('publication')
			),
		),
	),


    'field_doi_identifier' => array(
      'field_name'  => 'field_doi_identifier',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  
    'field_doi_creator' => array(
      'field_name'  => 'field_doi_creator',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  
    'field_doi_title' => array(
      'field_name'  => 'field_doi_title',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  
    'field_doi_publisher' => array(
      'field_name'  => 'field_doi_publisher',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  
    'field_doi_dates' => array(
      'field_name'  => 'field_doi_dates',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  
    'field_doi_location' => array(
      'field_name'  => 'field_doi_location',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  
  
    'field_doi_description' => array(
      'field_name'  => 'field_doi_description',
      'cardinality' => 1,
      'type'        => 'text_long',
    ),
  
    'field_doi_contributors' => array(
      'field_name'  => 'field_doi_contributors',
      'cardinality' => 1,
      'type'        => 'text_long',
    ),
  
    'field_doi_rights' => array(
      'field_name'  => 'field_doi_rights',
      'cardinality' => 1,
      'type'        => 'text_long',
    ),


  );
}

/**
 * Define the field instances for our content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "doi_display_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This big array is factored into this function for readability.
 *
 * @return array
 *   An associative array specifying the instances we wish to add to our new
 *   node type.
 */
function _doi_display_installed_instances() {
  return array(


    'field_first_use_paper' => array(
      'field_name'  => 'field_first_use_paper',
      'label' => t('First Use Paper'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'autocomplete',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
     'settings' => array(
       'target_type' => 'node',
    	      'handler_settings' => array(
    		    'target_bundles' => array('publication')
    	       ),
    	    ),
    
    ),
    
    



    'field_doi_identifier' => array(
      'field_name'  => 'field_doi_identifier',
      'label' => t('Identifier'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_creator' => array(
      'field_name'  => 'field_doi_creator',
      'label' => t('Creator'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_title' => array(
      'field_name'  => 'field_doi_title',
      'label' => t('Title'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_publisher' => array(
      'field_name'  => 'field_doi_publisher',
      'label' => t('Publisher'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_dates' => array(
      'field_name'  => 'field_doi_dates',
      'label' => t('Dates'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_location' => array(
      'field_name'  => 'field_doi_location',
      'label' => t('Location'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    
    
    'field_doi_description' => array(
      'field_name'  => 'field_doi_description',
      'label' => t('Description'),
      'type'        => 'text_long',
      'widget'      => array(
        'type'    => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_contributors' => array(
      'field_name'  => 'field_doi_contributors',
      'label' => t('Contributors'),
      'type'        => 'text_long',
      'widget'      => array(
        'type'    => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_rights' => array(
      'field_name'  => 'field_doi_rights',
      'label' => t('Rights'),
      'type'        => 'text_long',
      'widget'      => array(
        'type'    => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),


  );
}


/**
 * Implements hook_uninstall().
 */
function doi_display_uninstall() {
    $ournewtype = 'doi_display';
    $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
    $result = db_query($sql, array(':type' => $ournewtype));
    $nodeids = array();
    foreach ($result as $row) {
        $nodeids[] = $row->nid;
    }
    node_delete_multiple($nodeids);
    node_type_delete($ournewtype);

    $ournewtype = 'doi-display';
    node_type_delete($ournewtype);


    foreach (_doi_display_installed_fields() as $field) {
      field_delete_field($field['field_name']);
    }

	// DOES need to be run twice
	field_purge_batch(1000); 
	field_purge_batch(1000); 
}


