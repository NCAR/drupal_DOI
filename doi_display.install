<?php
// Install / remove the doi content type during module installation / removal



/**
 * Implements hook_menu().
 *
 */
function doi_display_menu() {
  $items['examples/doi_display'] = array(
    'page callback' => 'doi_display_page',
    'access arguments' => array('access content'),
    'title' => 'Node Example',
  );
  return $items;
}

/**
 * Implements hook_node_info().
 *
 */
function doi_display_node_info() {
  return array(
    'doi_display' => array(
      'name' => t('DOI'),
      'base' => 'node_content',
      'description' => t(''),
      'title_label' => t('Digital Object Identifier'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_node_type_insert().
 *
 */
function doi_display_node_type_insert($content_type) {
  if ($content_type->type == 'doi_display') {
    // Create all the fields we are adding to our content type.
    foreach (_doi_display_installed_fields() as $field) {
      field_create_field($field);
    }

    // Create all the instances for our fields.
    foreach (_doi_display_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'doi_display';
      field_create_instance($instance);
    }


    // Create the group
    $group_name = 'group_no_edit';
    $entity_type = 'node';
    $bundle = 'doi_display';
    $mode = 'form';

    $group = (object) array(
      'identifier' => $group_name .'|'. $entity_type .'|'. $bundle .'|'. $mode,
      'group_name' => $group_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'mode' => $mode,
      'label' => 'Don\'t edit these fields, they are populated by DataCite. Make changes there.',
      'weight' => '1',
      'children' => array(
        'field_doi_identifier',
        'field_doi_creator',
        'field_doi_title',
        'field_doi_publisher',
        'field_doi_description',
        'field_doi_contributors',
        'field_doi_dates',
        'field_doi_rights',
        'field_doi_location',
      ),
      'format_type' => 'fieldset',
      'format_settings' => array(
        'formatter' => 'collapsible',
        'instance_settings' => array(
          'description' => '',
          'classes' => '',
          'required_fields' => 1,
        ),
      ),
    );

    field_group_group_save($group);

    node_types_rebuild();
  }
}

/**
 * Implements hook_form().
 *
 */
function doi_display_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 *
 * This callback comes from hook_menu().
 */
// function doi_display_page() {
//   // We'll start building a renderable array that will be our page.
//   // For now we just declare the array.
//   $renderable_array = array();
//   // We query the database and find all of the nodes for the type we defined.
//   $sql = 'SELECT nid FROM {node} n WHERE n.type = :type AND n.status = :status';
//   $result = db_query($sql,
//     array(
//       ':type' => 'doi_display',
//       ':status' => 1,
//     )
//   );
//   $renderable_array['explanation'] = array(
//     '#markup' => t("Node Example nodes you've created will be displayed here. Note that the color fields will be displayed differently in this list, than if you view the node normally. Click on the node title to see the difference. This is a result of using our 'example_node_list' node view type."),
//   );
// 
//   foreach ($result as $row) {
//     $node = node_load($row->nid);
//     $renderable_array['node_list'][] = node_view($node, 'example_node_list');
//   }
//   return $renderable_array;
// }


/**
 * Implements hook_entity_info_alter().
 */
function doi_display_entity_info_alter(&$entity_info) {
  // Add our new view mode to the list of view modes...
  $entity_info['node']['view modes']['example_node_list'] = array(
    'label' => t('Example Node List'),
    'custom settings' => TRUE,
  );
}


/**
 * Implements hook_field_formatter_info().
 */
function doi_display_field_formatter_info() {
  return array(
    'doi_display_colors' => array(
      'label' => t('Node Example Color Handle'),
      'field types' => array('text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function doi_display_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'doi_display_colors':
      foreach ($items as $delta => $item) {
        $element[$delta]['#type'] = 'markup';
        $color = $item['safe_value'];
        $element[$delta]['#markup'] = theme('example_node_color', array('color' => $color));
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function doi_display_theme($existing, $type, $theme, $path) {
  return array(
    'example_node_color' => array(
      'variables' => array('color' => NULL),
    ),
  );
}

/**
 * Implements hook_help().
 */
// function doi_display_help($path, $arg) {
//   switch ($path) {
//     case 'examples/doi_display':
//       return "<p>" . t("The Node Example module provides a custom node type.
//         You can create new Example Node nodes using the <a href='!nodeadd'>node add form</a>.",
//         array('!nodeadd' => url('node/add/node-example'))) . "</p>";
//   }
// }

/**
 * A custom theme function.
 *
 * By using this function to format our node-specific information, themes
 * can override this presentation if they wish.  This is a simplifed theme
 * function purely for illustrative purposes.
 */
function theme_example_node_color($variables) {
  $output = '<span style="background-color: #ccc; padding: 1em; margin-bottom: 1em; float: left; color: ' . $variables['color'] . '">' . $variables['color'] . '</span>';
  return $output;
}

/**
 * Define the fields for our content type.
 *
 * This big array is factored into this function for readability.
 *
 * @return array
 *   An associative array specifying the fields we wish to add to our
 *   new node type.
 */
function _doi_display_installed_fields() {
  return array(
	'field_first_use_paper' => array(
		'field_name'  => 'field_first_use_paper',
		'cardinality' => 1,
		'type'        => 'entityreference',
		'settings' => array(
			'target_type' => 'node',
			'handler_settings' => array(
				'target_bundles' => array('publication')
			),
		),
	),


    'field_doi_identifier' => array(
      'field_name'  => 'field_doi_identifier',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  
    'field_doi_creator' => array(
      'field_name'  => 'field_doi_creator',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  
    'field_doi_title' => array(
      'field_name'  => 'field_doi_title',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  
    'field_doi_publisher' => array(
      'field_name'  => 'field_doi_publisher',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  
    'field_doi_dates' => array(
      'field_name'  => 'field_doi_dates',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  
    'field_doi_location' => array(
      'field_name'  => 'field_doi_location',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  
  
    'field_doi_description' => array(
      'field_name'  => 'field_doi_description',
      'cardinality' => 1,
      'type'        => 'text_long',
    ),
  
    'field_doi_contributors' => array(
      'field_name'  => 'field_doi_contributors',
      'cardinality' => 1,
      'type'        => 'text_long',
    ),
  
    'field_doi_rights' => array(
      'field_name'  => 'field_doi_rights',
      'cardinality' => 1,
      'type'        => 'text_long',
    ),


  );
}

/**
 * Define the field instances for our content type.
 *
 */
function _doi_display_installed_instances() {
  return array(


	'field_first_use_paper' => array(
		'field_name'  => 'field_first_use_paper',
		'label' => t('First Use Paper'),
		'type'        => 'text',
		'widget'      => array(
			'type'    => 'autocomplete',
		),
		'settings' => array(
			'target_type' => 'node',
			'handler_settings' => array(
				'target_bundles' => array('publication')
			),
		),
		// 'display' => array(
		// 	'default' => array(
		// 	'label' => 'hidden',
		// 	'type' => 'hidden',
		// 	),
		// ),
	),
    
    'field_doi_identifier' => array(
      'field_name'  => 'field_doi_identifier',
      'label' => t('Identifier'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_creator' => array(
      'field_name'  => 'field_doi_creator',
      'label' => t('Creator'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_title' => array(
      'field_name'  => 'field_doi_title',
      'label' => t('Title'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_publisher' => array(
      'field_name'  => 'field_doi_publisher',
      'label' => t('Publisher'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_dates' => array(
      'field_name'  => 'field_doi_dates',
      'label' => t('Dates'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_location' => array(
      'field_name'  => 'field_doi_location',
      'label' => t('Location'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    
    
    'field_doi_description' => array(
      'field_name'  => 'field_doi_description',
      'label' => t('Description'),
      'type'        => 'text_long',
      'widget'      => array(
        'type'    => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_contributors' => array(
      'field_name'  => 'field_doi_contributors',
      'label' => t('Contributors'),
      'type'        => 'text_long',
      'widget'      => array(
        'type'    => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    
    'field_doi_rights' => array(
      'field_name'  => 'field_doi_rights',
      'label' => t('Rights'),
      'type'        => 'text_long',
      'widget'      => array(
        'type'    => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),


  );
}


/**
 * Implements hook_uninstall().
 */
function doi_display_uninstall() {
    $ournewtype = 'doi_display';
    $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
    $result = db_query($sql, array(':type' => $ournewtype));
    $nodeids = array();
    foreach ($result as $row) {
        $nodeids[] = $row->nid;
    }
    node_delete_multiple($nodeids);
    node_type_delete($ournewtype);

    $ournewtype = 'doi-display';
    node_type_delete($ournewtype);


    foreach (_doi_display_installed_fields() as $field) {
      field_delete_field($field['field_name']);
    }

	// DOES need to be run twice
	field_purge_batch(1000); 
	field_purge_batch(1000); 
}


